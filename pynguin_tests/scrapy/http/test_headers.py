# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import scrapy.http.headers as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -604
    complex_0 = -311.1 + 4556.5318j
    dict_0 = {int_0: int_0, int_0: complex_0, int_0: complex_0}
    module_0.Headers(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    headers_0 = module_0.Headers()
    var_0 = headers_0.to_unicode_dict()
    float_0 = -2406.4736
    var_1 = headers_0.update(var_0)
    var_1.__getitem__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    headers_0 = module_0.Headers()
    headers_0.update(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 1
    headers_0 = module_0.Headers()
    none_type_0 = None
    var_0 = headers_0.normvalue(none_type_0)
    var_1 = headers_0.to_string()
    var_2 = headers_0.__setitem__(var_1, int_0)
    assert len(headers_0) == 1
    str_0 = "=$BuiS3x4atC\x0b\nl~:"
    var_1.appendlist(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b""
    headers_0 = module_0.Headers()
    var_0 = headers_0.setlist(bytes_0, bytes_0)
    assert len(headers_0) == 1
    var_0.update(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 1
    headers_0 = module_0.Headers()
    var_0 = headers_0.to_string()
    var_1 = headers_0.__setitem__(var_0, int_0)
    assert len(headers_0) == 1
    str_0 = "=$BuiS3x4atC\x0b\nl~:"
    var_0.appendlist(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    headers_0 = module_0.Headers()
    headers_0.__getitem__(headers_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    headers_0 = module_0.Headers()
    headers_0.get(headers_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    none_type_0 = None
    headers_0 = module_0.Headers(none_type_0, none_type_0)
    assert (
        f"{type(headers_0).__module__}.{type(headers_0).__qualname__}"
        == "headers.Headers"
    )
    assert len(headers_0) == 0
    headers_0.getlist(bool_0, bool_0)


def test_case_9():
    headers_0 = module_0.Headers()
    var_0 = headers_0.to_string()


def test_case_10():
    headers_0 = module_0.Headers()
    var_0 = headers_0.values()
    var_1 = headers_0.to_unicode_dict()
    headers_1 = module_0.Headers()


def test_case_11():
    headers_0 = module_0.Headers()
    var_0 = headers_0.to_unicode_dict()
    headers_1 = module_0.Headers()


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    headers_0 = module_0.Headers()
    headers_0.setlistdefault(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b""
    headers_0 = module_0.Headers()
    var_0 = headers_0.get(bytes_0, bytes_0)
    assert var_0 == b""
    list_0 = [var_0]
    headers_0.appendlist(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 908
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    headers_0 = module_0.Headers()
    var_0 = headers_0.__copy__()
    var_0.appendlist(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 1
    headers_0 = module_0.Headers()
    var_0 = headers_0.to_unicode_dict()
    var_1 = headers_0.to_string()
    var_2 = headers_0.__setitem__(var_1, int_0)
    assert len(headers_0) == 1
    bytes_0 = b"R\xac}{2\x0e~\x08\x00"
    var_3 = headers_0.appendlist(bytes_0, var_1)
    assert len(headers_0) == 2
    var_1.normvalue(var_1)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "f"
    headers_0 = module_0.Headers()
    var_0 = headers_0.values()
    var_1 = headers_0.get(str_0)
    var_1.update(var_1)


def test_case_17():
    bytes_0 = b"\xdc @\xaf'hB\x02\x80\xd7\x9b"
    headers_0 = module_0.Headers()
    var_0 = headers_0.to_unicode_dict()
    var_1 = headers_0.getlist(bytes_0)
    var_2 = headers_0.items()


@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b"~\xda\t\x84\xad\x8ce\x08:Q\xdc"
    headers_0 = module_0.Headers()
    var_0 = headers_0.getlist(bytes_0, bytes_0)
    var_1 = headers_0.setlist(bytes_0, bytes_0)
    var_1.update(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 1
    headers_0 = module_0.Headers()
    var_0 = headers_0.to_unicode_dict()
    var_1 = headers_0.to_string()
    var_2 = headers_0.__setitem__(var_1, int_0)
    assert len(headers_0) == 1
    var_3 = headers_0.to_string()
    assert var_3 == b": 1"
    var_0.to_unicode_dict()


@pytest.mark.xfail(strict=True)
def test_case_20():
    headers_0 = module_0.Headers()
    var_0 = headers_0.to_unicode_dict()
    var_1 = headers_0.to_string()
    var_2 = headers_0.__setitem__(var_1, var_0)
    assert len(headers_0) == 1
    var_3 = headers_0.values()
    var_4 = var_0.values()
    var_2.to_unicode_dict()


@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b"\xd8{rv\xd20*"
    float_0 = -2801.33
    headers_0 = module_0.Headers()
    headers_0.getlist(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = 1
    headers_0 = module_0.Headers()
    none_type_0 = None
    var_0 = headers_0.to_string()
    var_1 = headers_0.__setitem__(var_0, int_0)
    assert len(headers_0) == 1
    none_type_1 = None
    var_2 = headers_0.to_string()
    assert var_2 == b": 1"
    var_3 = headers_0.to_unicode_dict()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "scrapy.utils.datatypes.CaselessDict"
    )
    assert len(var_3) == 1
    none_type_0.normkey(none_type_1)
