# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import cookies as module_0
import re as module_1
import http.cookiejar as module_2
import enum as module_3


def test_case_0():
    cookie_jar_0 = module_0.CookieJar()


def test_case_1():
    str_0 = "mw2~d\tSI}0a-,)I\rO"
    var_0 = module_0.potential_domain_matches(str_0)
    var_1 = var_0.__iter__()
    wrapped_response_0 = module_0.WrappedResponse(var_1)
    cookie_jar_0 = module_0.CookieJar(wrapped_response_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.potential_domain_matches(none_type_0)


def test_case_3():
    str_0 = "\nThis module implements theoFormRequest class which id a more convenient class\n(than Request) to generate Requests baged on form data.\n\nSee documentation in docs/topics/request-response.rst\n"
    var_0 = module_0.potential_domain_matches(str_0)


def test_case_4():
    dummy_lock_0 = module_0._DummyLock()


@pytest.mark.xfail(strict=True)
def test_case_5():
    cookie_jar_0 = module_0.CookieJar()
    list_0 = []
    str_0 = "4<gNS%TYUU) h8v"
    none_type_0 = None
    str_1 = "Aot%YXlQ|71G[yD"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    cookie_jar_0.clear_session_cookies(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dummy_lock_0 = module_0._DummyLock()
    var_0 = dummy_lock_0.release()
    var_1 = dummy_lock_0.acquire()
    var_2 = module_1.purge()
    var_1.return_ok(var_1, var_2)


@pytest.mark.xfail(strict=True)
def test_case_7():
    cookie_jar_0 = module_0.CookieJar()
    none_type_0 = None
    var_0 = cookie_jar_0.__len__()
    cookie_jar_0.make_cookies(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    wrapped_request_0 = module_0.WrappedRequest(none_type_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_0.header_items()


def test_case_9():
    bool_0 = False
    wrapped_response_0 = module_0.WrappedResponse(bool_0)
    cookie_jar_0 = module_0.CookieJar()


@pytest.mark.xfail(strict=True)
def test_case_10():
    cookie_jar_0 = module_0.CookieJar()
    cookie_jar_0.set_cookie_if_ok(cookie_jar_0, cookie_jar_0)


def test_case_11():
    str_0 = "\nThis module implements the FormRequest class which is a more convenient class\n(than Request) to generate Requests based on form data.\n\nSee documentation in docs/topics/request-response.rst\n"
    var_0 = module_0.potential_domain_matches(str_0)
    cookie_jar_0 = module_0.CookieJar(str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    cookie_jar_0 = module_0.CookieJar()
    cookie_jar_0.clear(path=cookie_jar_0, name=cookie_jar_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    wrapped_request_0 = module_0.WrappedRequest(none_type_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_0.get_full_url()


@pytest.mark.xfail(strict=True)
def test_case_14():
    cookie_policy_0 = module_2.CookiePolicy()
    wrapped_request_0 = module_0.WrappedRequest(cookie_policy_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    wrapped_request_0.has_header(none_type_0)


def test_case_15():
    cookie_jar_0 = module_0.CookieJar()
    var_0 = cookie_jar_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_16():
    cookie_jar_0 = module_0.CookieJar()
    none_type_0 = None
    none_type_1 = None
    cookie_jar_0.extract_cookies(none_type_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_17():
    cookie_jar_0 = module_0.CookieJar()
    var_0 = cookie_jar_0.set_policy(cookie_jar_0)
    int_0 = 4122
    module_3.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    cookie_jar_0 = module_0.CookieJar()
    none_type_0 = None
    cookie_jar_0.set_cookie(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    wrapped_request_0 = module_0.WrappedRequest(none_type_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_0.get_type()


@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    wrapped_request_0 = module_0.WrappedRequest(none_type_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_0.is_unverifiable()


@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    wrapped_request_0 = module_0.WrappedRequest(none_type_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    bool_0 = True
    wrapped_request_0.add_unredirected_header(bool_0, none_type_0)


def test_case_22():
    str_0 = "sB.{0Ic29-"
    var_0 = module_0.potential_domain_matches(str_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    dummy_lock_0 = module_0._DummyLock()
    wrapped_request_0 = module_0.WrappedRequest(dummy_lock_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_0.get_host()


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "sB.0Ic29-"
    none_type_0 = None
    wrapped_request_0 = module_0.WrappedRequest(str_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_0.get_header(none_type_0, none_type_0)


def test_case_25():
    str_0 = "\n        .. versionadded:: 2.2\n\n        Deserialize a JSON document to a Python object.\n        "
    var_0 = module_0.potential_domain_matches(str_0)
    cookie_jar_0 = module_0.CookieJar(str_0)
