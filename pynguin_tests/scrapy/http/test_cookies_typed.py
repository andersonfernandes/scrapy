# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import scrapy.http.cookies_typed as module_0
import scrapy.http.response as module_1


def test_case_0():
    cookie_jar_0 = module_0.CookieJar()


def test_case_1():
    str_0 = "WeNF,rhX\x0bbSaj[sC\tP"
    list_0 = module_0.potential_domain_matches(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 537.0
    module_0.potential_domain_matches(float_0)


def test_case_3():
    dummy_lock_0 = module_0._DummyLock()


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "\nThis modue implements the FormRequest class which is a more convenient class\n(than Requet) to generate Requests based on form data.\n\nSee documentation in docs/topics/requesp-response.rst\n"
    list_0 = module_0.potential_domain_matches(str_0)
    cookie_jar_0 = module_0.CookieJar(check_expired_frequency=list_0)
    none_type_0 = None
    dict_0 = {}
    var_0 = cookie_jar_0.clear_session_cookies(**dict_0)
    var_1 = cookie_jar_0.__iter__()
    str_1 = "method"
    response_0 = module_1.Response(
        str_1, headers=var_1, flags=none_type_0, request=str_1
    )
    var_2 = cookie_jar_0.add_cookie_header(response_0)
    var_3 = cookie_jar_0.make_cookies(response_0, list_0)
    var_2.make_cookies(str_0, response_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    cookie_jar_0 = module_0.CookieJar()
    var_0 = cookie_jar_0.clear(none_type_0, name=none_type_0)
    dummy_lock_0 = module_0._DummyLock()
    dummy_lock_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "\nThis modue implements the FormRequest class which is a more convenient class\n(than Requet) to generate Requests based on form data.\n\nSee documentation in docs/topics/requesp-response.rst\n"
    cookie_jar_0 = module_0.CookieJar(check_expired_frequency=str_0)
    response_0 = module_1.Response(
        str_0, headers=cookie_jar_0, flags=cookie_jar_0, request=str_0
    )
    var_0 = cookie_jar_0.add_cookie_header(response_0)
    response_0.make_cookies(response_0, response_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "\nThis modue implements the FormRequest class which is a more convenient class\n(than Requet) to generate Requests based on form data.\n\nSee documentation in docs/topics/requesp-response.rst\n"
    list_0 = module_0.potential_domain_matches(str_0)
    cookie_jar_0 = module_0.CookieJar(check_expired_frequency=list_0)
    wrapped_response_0 = module_0.WrappedResponse(cookie_jar_0)
    var_0 = cookie_jar_0.set_policy(wrapped_response_0)
    response_0 = module_1.Response(str_0, headers=var_0, flags=var_0, request=str_0)
    var_1 = cookie_jar_0.add_cookie_header(response_0)
    cookie_jar_0.make_cookies(response_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    cookie_jar_0 = module_0.CookieJar()
    var_0 = cookie_jar_0.__iter__()
    cookie_jar_0.set_cookie(cookie_jar_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 1
    cookie_jar_0 = module_0.CookieJar(check_expired_frequency=int_0)
    dummy_lock_0 = module_0._DummyLock()
    wrapped_response_0 = module_0.WrappedResponse(int_0)
    var_0 = dummy_lock_0.release()
    wrapped_response_0.get_host()


def test_case_10():
    bool_0 = False
    wrapped_request_0 = module_0.WrappedRequest(bool_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "q\nf5"
    wrapped_request_0 = module_0.WrappedRequest(str_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_0.get_host()


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "7N`q:jAz^B9LREp+Q"
    wrapped_request_0 = module_0.WrappedRequest(str_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    list_0 = module_0.potential_domain_matches(str_0)
    wrapped_request_0.is_unverifiable()


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    wrapped_request_0 = module_0.WrappedRequest(none_type_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    str_0 = "<Qc:@}"
    wrapped_request_0.add_unredirected_header(str_0, str_0)


def test_case_14():
    str_0 = "\nThis module implements the FormRequest class which is a more convenient class\n(than Request) to generate Requests based on form data.\n\nSee documentation in docs/topics/request-response.rst\n"
    list_0 = module_0.potential_domain_matches(str_0)
    cookie_jar_0 = module_0.CookieJar(check_expired_frequency=list_0)
    response_0 = module_1.Response(str_0)
    var_0 = cookie_jar_0.make_cookies(response_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    wrapped_request_0 = module_0.WrappedRequest(none_type_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_1 = module_0.WrappedRequest(none_type_0)
    cookie_jar_0 = module_0.CookieJar()
    str_0 = "G8 Ei01A6"
    wrapped_request_0.has_header(str_0)


def test_case_16():
    str_0 = "\nThis module implements the HtmlResponse class which adds encoding\ndiscovering through HTML encoding declarations to the TextResponse class.\n\nSee documentation in docs/topics/request-response.rst\n"
    list_0 = module_0.potential_domain_matches(str_0)
    wrapped_request_0 = module_0.WrappedRequest(list_0)
    assert wrapped_request_0.request == [
        "\nThis module implements the HtmlResponse class which adds encoding\ndiscovering through HTML encoding declarations to the TextResponse class.\n\nSee documentation in docs/topics/request-response.rst\n",
        "\n\nSee documentation in docs/topics/request-response.rst\n",
        ".\nThis module implements the HtmlResponse class which adds encoding\ndiscovering through HTML encoding declarations to the TextResponse class.\n\nSee documentation in docs/topics/request-response.rst\n",
        ".\n\nSee documentation in docs/topics/request-response.rst\n",
    ]
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_17():
    cookie_jar_0 = module_0.CookieJar()
    str_0 = "?8BU}oov>&:ye&,{a_"
    cookie_jar_0.set_cookie_if_ok(str_0, cookie_jar_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    cookie_jar_0 = module_0.CookieJar()
    wrapped_request_0 = module_0.WrappedRequest(cookie_jar_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_0.get_header(cookie_jar_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = "7N`q:jAz^B9LREp+Q"
    wrapped_request_0 = module_0.WrappedRequest(str_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    list_0 = module_0.potential_domain_matches(str_0)
    wrapped_request_0.get_full_url()


def test_case_20():
    cookie_jar_0 = module_0.CookieJar()
    str_0 = "http://es.r/relar-exressions"
    response_0 = module_1.Response(
        str_0, headers=cookie_jar_0, flags=str_0, request=str_0
    )
    var_0 = cookie_jar_0.add_cookie_header(response_0)


def test_case_21():
    cookie_jar_0 = module_0.CookieJar()
    var_0 = cookie_jar_0.__len__()


def test_case_22():
    str_0 = "\nThis module implements the HtmlResponse class which adds encoding\ndiscovering through HTML encoding declarations to the TextResponse class.\n\nSee documentation in docs/topics/request-response.rst\n"
    none_type_0 = None
    wrapped_request_0 = module_0.WrappedRequest(none_type_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    cookie_jar_0 = module_0.CookieJar(str_0)
    cookie_jar_1 = module_0.CookieJar()


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "\nThis module implements the HtmlResponse class which adds encoding\ndiscovering through HTML encoding declarations to the TextResponse class.\n\nSee documentation in docs/topics/request-response.rst\n"
    list_0 = module_0.potential_domain_matches(str_0)
    wrapped_request_0 = module_0.WrappedRequest(list_0)
    assert wrapped_request_0.request == [
        "\nThis module implements the HtmlResponse class which adds encoding\ndiscovering through HTML encoding declarations to the TextResponse class.\n\nSee documentation in docs/topics/request-response.rst\n",
        "\n\nSee documentation in docs/topics/request-response.rst\n",
        ".\nThis module implements the HtmlResponse class which adds encoding\ndiscovering through HTML encoding declarations to the TextResponse class.\n\nSee documentation in docs/topics/request-response.rst\n",
        ".\n\nSee documentation in docs/topics/request-response.rst\n",
    ]
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_0.get_type()


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "\nThis module implements the HtmlResponse class which adds encoding\ndiscovering through HTML encoding declarations to the TextResponse class.\n\nSee documentation in docs/topics/request-response.rst\n"
    list_0 = module_0.potential_domain_matches(str_0)
    dummy_lock_0 = module_0._DummyLock()
    cookie_jar_0 = module_0.CookieJar()
    str_1 = "\n        A generator that produces :class:`~.Request` instances to follow all\n        links in ``urls``. It accepts the same arguments as the :class:`~.Request`'s\n        ``__init__`` method, except that each ``urls`` element does not need to be\n        an absolute URL, it can be any of the following:\n\n        * a relative URL\n        * a :class:`~scrapy.link.Link` object, e.g. the result of\n          :ref:`topics-link-extractors`\n        * a :class:`~scrapy.selector.Selector` object for a ``<link>`` or ``<a>`` element, e.g.\n          ``response.css('a.my_link')[0]``\n        * an attribute :class:`~scrapy.selector.Selector` (not SelectorList), e.g.\n          ``response.css('a::attr(href)')[0]`` or\n          ``response.xpath('//img/@src')[0]``\n\n        In addition, ``css`` and ``xpath`` arguments are accepted to perform the link extraction\n        within the ``follow_all`` method (only one of ``urls``, ``css`` and ``xpath`` is accepted).\n\n        Note that when passing a ``SelectorList`` as argument for the ``urls`` parameter or\n        using the ``css`` or ``xpath`` parameters, this method will not produce requests for\n        selectors from which links cannot be obtained (for instance, anchor tags without an\n        ``href`` attribute)\n        "
    cookie_jar_0.extract_cookies(dummy_lock_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "\n        Return a :class:`~.Request` instance to follow a link ``url``.\n        It accepts the same arguments as ``Request.__init__`` method,\n        but ``url`` can be not only an absolute URL, but also\n\n        * a relative URL\n        * a :class:`~scrapy.link.Link` object, e.g. the result of\n          :ref:`topics-link-extractors`\n        * a :class:`~scrapy.selector.Selector` object for a ``<link>`` or ``<a>`` element, e.g.\n          ``response.css('a.my_link')[0]``\n        * an attribute :class:`~scrapy.selector.Selector` (not SelectorList), e.g.\n          ``response.css('a::attr(href)')[0]`` or\n          ``response.xpath('//img/@src')[0]``\n\n        See :ref:`response-follow-example` for usage examples.\n        "
    list_0 = module_0.potential_domain_matches(str_0)
    dummy_lock_0 = module_0._DummyLock()
    var_0 = dummy_lock_0.acquire()
    var_1 = dummy_lock_0.acquire()
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b'1"t\x7f+\xc5\xf3F\xfd\x87\x91\x8d\xb3,\x1f'
    wrapped_request_0 = module_0.WrappedRequest(bytes_0)
    assert (
        f"{type(module_0.WrappedRequest.full_url).__module__}.{type(module_0.WrappedRequest.full_url).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.host).__module__}.{type(module_0.WrappedRequest.host).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.type).__module__}.{type(module_0.WrappedRequest.type).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.unverifiable).__module__}.{type(module_0.WrappedRequest.unverifiable).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappedRequest.origin_req_host).__module__}.{type(module_0.WrappedRequest.origin_req_host).__qualname__}"
        == "builtins.property"
    )
    wrapped_request_0.header_items()


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "jIHh5`h|Ont14tF"
    list_0 = module_0.potential_domain_matches(str_0)
    cookie_jar_0 = module_0.CookieJar(check_expired_frequency=str_0)
    wrapped_response_0 = module_0.WrappedResponse(cookie_jar_0)
    wrapped_response_1 = module_0.WrappedResponse(list_0)
    assert wrapped_response_1.response == ["jIHh5`h|Ont14tF", ".jIHh5`h|Ont14tF"]
    var_0 = cookie_jar_0.__iter__()
    str_1 = "htp://estr/relar-expession"
    response_0 = module_1.Response(str_1, headers=var_0, flags=var_0, request=str_1)
    cookie_jar_0.add_cookie_header(response_0)
