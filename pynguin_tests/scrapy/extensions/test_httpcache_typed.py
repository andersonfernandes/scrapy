# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import scrapy.extensions.httpcache_typed as module_0
import scrapy.http.headers as module_1
import scrapy.settings as module_2


def test_case_0():
    str_0 = "r#_0WKu_nM-v*D"
    dict_0 = module_0.parse_cachecontrol(str_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.rfc1123_to_epoch(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    module_0.FilesystemCacheStorage(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    module_0.DummyPolicy(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = 2698.04485 - 653.8445j
    module_0.RFC2616Policy(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    module_0.DbmCacheStorage(bool_0)


def test_case_6():
    str_0 = "V=Sn>J,IrSMR/C>"
    dict_0 = module_0.parse_cachecontrol(str_0)


def test_case_7():
    str_0 = "2nZuq,"
    dict_0 = module_0.parse_cachecontrol(str_0)


def test_case_8():
    headers_0 = module_1.Headers()
    dummy_policy_0 = module_0.DummyPolicy(headers_0)


def test_case_9():
    none_type_0 = None
    settings_0 = module_2.Settings(none_type_0)
    filesystem_cache_storage_0 = module_0.FilesystemCacheStorage(settings_0)
    assert (
        f"{type(filesystem_cache_storage_0).__module__}.{type(filesystem_cache_storage_0).__qualname__}"
        == "httpcache_typed.FilesystemCacheStorage"
    )
    assert filesystem_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert filesystem_cache_storage_0.expiration_secs == 0
    assert filesystem_cache_storage_0.use_gzip is False


def test_case_10():
    none_type_0 = None
    settings_0 = module_2.Settings(none_type_0)
    dummy_policy_0 = module_0.DummyPolicy(settings_0)
    assert dummy_policy_0.ignore_schemes == ["file"]
    bool_0 = dummy_policy_0.is_cached_response_fresh(settings_0, dummy_policy_0)
    filesystem_cache_storage_0 = module_0.FilesystemCacheStorage(settings_0)
    assert (
        f"{type(filesystem_cache_storage_0).__module__}.{type(filesystem_cache_storage_0).__qualname__}"
        == "httpcache_typed.FilesystemCacheStorage"
    )
    assert filesystem_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert filesystem_cache_storage_0.expiration_secs == 0
    assert filesystem_cache_storage_0.use_gzip is False


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'B;j5P^#\rDIDGj"^K*/'
    dict_0 = module_0.parse_cachecontrol(str_0)
    none_type_0 = None
    settings_0 = module_2.Settings(none_type_0)
    dummy_policy_0 = module_0.DummyPolicy(settings_0)
    assert dummy_policy_0.ignore_schemes == ["file"]
    dummy_policy_0.should_cache_request(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'BA;j5P^#\rDIDGj"K*/'
    var_0 = module_0.rfc1123_to_epoch(str_0)
    settings_0 = module_2.Settings(var_0, var_0)
    dbm_cache_storage_0 = module_0.DbmCacheStorage(settings_0)
    assert (
        f"{type(dbm_cache_storage_0).__module__}.{type(dbm_cache_storage_0).__qualname__}"
        == "httpcache_typed.DbmCacheStorage"
    )
    assert dbm_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert dbm_cache_storage_0.expiration_secs == 0
    assert dbm_cache_storage_0.db is None
    dummy_policy_0 = module_0.DummyPolicy(settings_0)
    assert dummy_policy_0.ignore_schemes == ["file"]
    var_1 = settings_0.copy_to_dict()
    var_2 = settings_0.getpriority(var_0)
    filesystem_cache_storage_0 = module_0.FilesystemCacheStorage(settings_0)
    assert (
        f"{type(filesystem_cache_storage_0).__module__}.{type(filesystem_cache_storage_0).__qualname__}"
        == "httpcache_typed.FilesystemCacheStorage"
    )
    assert filesystem_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert filesystem_cache_storage_0.expiration_secs == 0
    assert filesystem_cache_storage_0.use_gzip is False
    var_3 = dummy_policy_0.is_cached_response_valid(var_1, str_0, var_1)
    r_f_c2616_policy_0 = module_0.RFC2616Policy(settings_0)
    assert r_f_c2616_policy_0.ignore_schemes == ["file"]
    assert module_0.RFC2616Policy.MAXAGE == 31536000
    r_f_c2616_policy_0.is_cached_response_fresh(dummy_policy_0, var_3)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'B;j5P^#\rDIDGj"K*/'
    dict_0 = module_0.parse_cachecontrol(str_0)
    none_type_0 = None
    settings_0 = module_2.Settings(none_type_0)
    dummy_policy_0 = module_0.DummyPolicy(settings_0)
    assert dummy_policy_0.ignore_schemes == ["file"]
    var_0 = settings_0.copy_to_dict()
    filesystem_cache_storage_0 = module_0.FilesystemCacheStorage(settings_0)
    assert (
        f"{type(filesystem_cache_storage_0).__module__}.{type(filesystem_cache_storage_0).__qualname__}"
        == "httpcache_typed.FilesystemCacheStorage"
    )
    assert filesystem_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert filesystem_cache_storage_0.expiration_secs == 0
    assert filesystem_cache_storage_0.use_gzip is False
    var_1 = dummy_policy_0.is_cached_response_valid(var_0, str_0, var_0)
    dummy_policy_0.should_cache_response(var_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    none_type_1 = None
    none_type_2 = None
    var_0 = module_0.rfc1123_to_epoch(none_type_0)
    settings_0 = module_2.Settings(var_0)
    filesystem_cache_storage_0 = module_0.FilesystemCacheStorage(settings_0)
    assert (
        f"{type(filesystem_cache_storage_0).__module__}.{type(filesystem_cache_storage_0).__qualname__}"
        == "httpcache_typed.FilesystemCacheStorage"
    )
    assert filesystem_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert filesystem_cache_storage_0.expiration_secs == 0
    assert filesystem_cache_storage_0.use_gzip is False
    filesystem_cache_storage_0.retrieve_response(none_type_1, none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'B;j5P^#\rDIDGj"K*/'
    dict_0 = module_0.parse_cachecontrol(str_0)
    none_type_0 = None
    settings_0 = module_2.Settings(none_type_0)
    dummy_policy_0 = module_0.DummyPolicy(settings_0)
    assert dummy_policy_0.ignore_schemes == ["file"]
    filesystem_cache_storage_0 = module_0.FilesystemCacheStorage(settings_0)
    assert (
        f"{type(filesystem_cache_storage_0).__module__}.{type(filesystem_cache_storage_0).__qualname__}"
        == "httpcache_typed.FilesystemCacheStorage"
    )
    assert filesystem_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert filesystem_cache_storage_0.expiration_secs == 0
    assert filesystem_cache_storage_0.use_gzip is False
    var_0 = dummy_policy_0.is_cached_response_valid(settings_0, str_0, settings_0)
    none_type_1 = None
    var_1 = module_0.rfc1123_to_epoch(none_type_1)
    filesystem_cache_storage_0.open_spider(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    settings_0 = module_2.Settings(none_type_0)
    dummy_policy_0 = module_0.DummyPolicy(settings_0)
    assert dummy_policy_0.ignore_schemes == ["file"]
    filesystem_cache_storage_0 = module_0.FilesystemCacheStorage(settings_0)
    assert (
        f"{type(filesystem_cache_storage_0).__module__}.{type(filesystem_cache_storage_0).__qualname__}"
        == "httpcache_typed.FilesystemCacheStorage"
    )
    assert filesystem_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert filesystem_cache_storage_0.expiration_secs == 0
    assert filesystem_cache_storage_0.use_gzip is False
    var_0 = filesystem_cache_storage_0.close_spider(none_type_0)
    var_1 = settings_0.items()
    settings_0.tell()


def test_case_17():
    str_0 = 'BA;j5P^#\rDIDGj"K*/'
    var_0 = module_0.rfc1123_to_epoch(str_0)
    settings_0 = module_2.Settings(var_0, var_0)
    r_f_c2616_policy_0 = module_0.RFC2616Policy(settings_0)
    assert r_f_c2616_policy_0.ignore_schemes == ["file"]
    assert module_0.RFC2616Policy.MAXAGE == 31536000


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 'BA;j5P^#\rDIDGj"K*/'
    var_0 = module_0.rfc1123_to_epoch(str_0)
    settings_0 = module_2.Settings(var_0, var_0)
    r_f_c2616_policy_0 = module_0.RFC2616Policy(settings_0)
    assert r_f_c2616_policy_0.ignore_schemes == ["file"]
    assert module_0.RFC2616Policy.MAXAGE == 31536000
    r_f_c2616_policy_0.is_cached_response_fresh(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'BA;j5P^#\rDIDGj"K*/'
    var_0 = module_0.rfc1123_to_epoch(str_0)
    dict_0 = module_0.parse_cachecontrol(str_0)
    none_type_0 = None
    settings_0 = module_2.Settings(dict_0, dict_0)
    assert len(settings_0) == 158
    dbm_cache_storage_0 = module_0.DbmCacheStorage(settings_0)
    assert (
        f"{type(dbm_cache_storage_0).__module__}.{type(dbm_cache_storage_0).__qualname__}"
        == "httpcache_typed.DbmCacheStorage"
    )
    assert dbm_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert dbm_cache_storage_0.expiration_secs == 0
    assert dbm_cache_storage_0.db is None
    dummy_policy_0 = module_0.DummyPolicy(settings_0)
    assert dummy_policy_0.ignore_schemes == ["file"]
    var_1 = settings_0.copy_to_dict()
    dbm_cache_storage_0.store_response(none_type_0, settings_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'BA;j5P^#\rDIDGj"K*/'
    var_0 = module_0.rfc1123_to_epoch(str_0)
    dict_0 = module_0.parse_cachecontrol(str_0)
    none_type_0 = None
    settings_0 = module_2.Settings(dict_0, dict_0)
    assert len(settings_0) == 158
    dbm_cache_storage_0 = module_0.DbmCacheStorage(settings_0)
    assert (
        f"{type(dbm_cache_storage_0).__module__}.{type(dbm_cache_storage_0).__qualname__}"
        == "httpcache_typed.DbmCacheStorage"
    )
    assert dbm_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert dbm_cache_storage_0.expiration_secs == 0
    assert dbm_cache_storage_0.db is None
    dummy_policy_0 = module_0.DummyPolicy(settings_0)
    assert dummy_policy_0.ignore_schemes == ["file"]
    var_1 = settings_0.copy_to_dict()
    dbm_cache_storage_0.open_spider(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'BA;j5P^#\rDIDGj"K*/'
    var_0 = module_0.rfc1123_to_epoch(str_0)
    dict_0 = module_0.parse_cachecontrol(str_0)
    settings_0 = module_2.Settings(dict_0, dict_0)
    assert len(settings_0) == 158
    dbm_cache_storage_0 = module_0.DbmCacheStorage(settings_0)
    assert (
        f"{type(dbm_cache_storage_0).__module__}.{type(dbm_cache_storage_0).__qualname__}"
        == "httpcache_typed.DbmCacheStorage"
    )
    assert dbm_cache_storage_0.cachedir == ".scrapy/httpcache"
    assert dbm_cache_storage_0.expiration_secs == 0
    assert dbm_cache_storage_0.db is None
    dbm_cache_storage_0.close_spider(var_0)
