# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import scrapy.extensions.httpcache as module_0
import scrapy.http.headers as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.rfc1123_to_epoch(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.DummyPolicy(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"W\x84\x89\xd5\xaf7GS\xeb\x1c\xcb\xa4G\xb5\xf1\xd4\x15U"
    module_0.RFC2616Policy(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 1707
    module_0.DbmCacheStorage(int_0)


def test_case_4():
    bytes_0 = b"W\x84\x89\xd5\xaf7GS\xeb\x1c\xcb\xa4G\xb5\xf1\xd4\x15U"
    r_f_c2616_policy_0 = module_0.parse_cachecontrol(bytes_0)


def test_case_5():
    bytes_0 = b""
    var_0 = module_0.parse_cachecontrol(bytes_0)


def test_case_6():
    bytes_0 = b"\xf0\x85=\x91\x1b\xfc\xebk\xe7\x1d\xc4:K\xbc\xc9\xba"
    var_0 = module_0.parse_cachecontrol(bytes_0)


def test_case_7():
    headers_0 = module_1.Headers()
    dummy_policy_0 = module_0.DummyPolicy(headers_0)


def test_case_8():
    headers_0 = module_1.Headers()
    var_0 = module_0.rfc1123_to_epoch(headers_0)
    dummy_policy_0 = module_0.DummyPolicy(headers_0)
    var_1 = dummy_policy_0.is_cached_response_fresh(dummy_policy_0, var_0)


def test_case_9():
    headers_0 = module_1.Headers()
    var_0 = module_0.rfc1123_to_epoch(headers_0)
    dummy_policy_0 = module_0.DummyPolicy(headers_0)
    var_1 = dummy_policy_0.is_cached_response_valid(headers_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    headers_0 = module_1.Headers()
    dummy_policy_0 = module_0.DummyPolicy(headers_0)
    dummy_policy_0.should_cache_request(dummy_policy_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    headers_0 = module_1.Headers()
    var_0 = module_0.rfc1123_to_epoch(headers_0)
    dummy_policy_0 = module_0.DummyPolicy(headers_0)
    dummy_policy_0.should_cache_response(dummy_policy_0, dummy_policy_0)
