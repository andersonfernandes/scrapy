# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import iterators_typed as module_0
import scrapy.http.response.text as module_1
import re as module_2
import scrapy.http.response as module_3


def test_case_0():
    none_type_0 = None
    stream_reader_0 = module_0._StreamReader(none_type_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    iterator_0 = module_0.csviter(none_type_0, none_type_0, none_type_0, none_type_0)
    none_type_1 = None
    stream_reader_0 = module_0._StreamReader(none_type_1)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    stream_reader_0.read()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    iterator_0 = module_0.csviter(none_type_0, headers=none_type_0)
    module_1.TextResponse(*iterator_0)


def test_case_3():
    none_type_0 = None
    iterator_0 = module_0.csviter(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "P(N`(cM>"
    iterator_0 = module_0.csviter(str_0, headers=str_0, encoding=str_0)
    module_1.TextResponse(*iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "P(N`(cM>"
    iterator_0 = module_0.csviter(str_0, headers=str_0, encoding=str_0)
    stream_reader_0 = module_0._StreamReader(str_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    str_1 = stream_reader_0.read()
    assert str_1 == b"P(N`(cM>"
    module_1.TextResponse(*iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "-$(}<"
    none_type_0 = None
    iterator_0 = module_0.xmliter_lxml(none_type_0, str_0)
    iterator_1 = module_0.xmliter(none_type_0, str_0)
    iterator_2 = module_0.xmliter_lxml(none_type_0, str_0, prefix=none_type_0)
    module_1.TextResponse(*iterator_2)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "P(N`(cM>"
    iterator_0 = module_0.csviter(str_0, headers=str_0, quotechar=str_0)
    module_1.TextResponse(*iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ""
    iterator_0 = module_0.csviter(str_0, headers=str_0, encoding=str_0)
    module_1.TextResponse(*iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "/"
    iterator_0 = module_0.csviter(str_0, headers=str_0, encoding=str_0)
    module_1.TextResponse(*iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "#ba:n.-BfD\nxgqu"
    iterator_0 = module_0.xmliter(str_0, str_0)
    module_1.TextResponse(*iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = ""
    stream_reader_0 = module_0._StreamReader(str_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    iterator_0 = module_0.xmliter(stream_reader_0, str_0)
    str_1 = stream_reader_0.read()
    assert str_1 == b""
    var_0 = module_2.purge()
    none_type_0 = None
    bytes_0 = b"\x8d]\xb2\x91m,\xc0\x86XC\x99\xff@\xcb\x89>{\xcc\x83"
    iterator_1 = module_0.xmliter_lxml(var_0, var_0, bytes_0, str_0)
    iterator_2 = module_0.xmliter_lxml(none_type_0, iterator_1, none_type_0)
    module_1.TextResponse(*iterator_2)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = ",H\r~"
    iterator_0 = module_0.csviter(str_0)
    module_1.TextResponse(*iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = ""
    response_0 = module_3.Response(str_0, certificate=str_0)
    iterator_0 = module_0.csviter(str_0, headers=response_0)
    module_0._StreamReader(response_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "+A};`?YH$x#9:c\n"
    iterator_0 = module_0.csviter(str_0, str_0, quotechar=str_0)
    module_1.TextResponse(*iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "H"
    response_0 = module_3.Response(str_0, request=str_0, certificate=str_0)
    iterator_0 = module_0.csviter(response_0)
    module_1.TextResponse(*iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "yt"
    stream_reader_0 = module_0._StreamReader(str_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    str_1 = stream_reader_0.read()
    assert str_1 == b"yt"
    iterator_0 = module_0.csviter(str_1)
    module_1.TextResponse(*iterator_0)
