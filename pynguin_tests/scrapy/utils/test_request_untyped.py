# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import request_untyped as module_0
import codecs as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "NS.w2[<L"
    module_0.request_fingerprint(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request_untyped.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    request_fingerprinter_0.fingerprint(request_fingerprinter_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request_untyped.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    str_0 = "C6Y"
    module_0.fingerprint(
        request_fingerprinter_0,
        include_headers=str_0,
        keep_fragments=request_fingerprinter_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_3():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request_untyped.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    module_0.fingerprint(request_fingerprinter_0)


def test_case_4():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request_untyped.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    module_0.request_from_dict(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request_untyped.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    request_fingerprinter_1 = module_0.RequestFingerprinter()
    none_type_0 = None
    module_0.request_authenticate(
        request_fingerprinter_1, none_type_0, request_fingerprinter_0
    )


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 1923
    module_0.RequestFingerprinter(int_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request_untyped.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    module_0.request_fingerprint(
        request_fingerprinter_0, keep_fragments=request_fingerprinter_0
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "+\r"
    request_fingerprinter_0 = module_1.make_identity_dict(str_0)
    module_0.request_from_dict(request_fingerprinter_0)
