# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import scrapy.utils.conf_typed as module_0
import scrapy.settings as module_1
import scrapy.exceptions as module_2
import scrapy.utils.python as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.build_component_list(none_type_0, convert=none_type_0)


def test_case_1():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    config_parser_0 = module_0.get_config(bool_0)
    assert (
        f"{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(config_parser_0) == 1
    config_parser_1 = module_0.get_config(bool_0)
    none_type_0 = None
    module_0.build_component_list(config_parser_1, convert=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.init_env(set_syspath=none_type_0)
    list_0 = module_0.get_sources()
    module_0.arglist_to_dict(list_0)


def test_case_4():
    var_0 = module_0.init_env()


def test_case_5():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0)
    list_1 = module_0.get_sources(list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = module_0.get_sources()
    str_0 = "R\r:s>wrmpftz\x0bq"
    str_1 = module_0.closest_scrapy_cfg(str_0)
    assert str_1 == ""
    config_parser_0 = module_0.get_config()
    bool_0 = True
    config_parser_1 = module_0.get_config()
    module_0.arglist_to_dict(bool_0)


def test_case_7():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0, dict_0)
    settings_0 = module_1.Settings(priority=dict_0)
    dict_1 = module_0.feed_process_params_from_cli(settings_0, dict_0)
    dict_2 = module_0.feed_complete_default_values_from_settings(dict_0, settings_0)
    var_0 = module_0.init_env()
    config_parser_0 = module_0.get_config()


@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0, dict_0)
    var_0 = module_0.init_env(list_0, list_0)
    list_1 = module_0.build_component_list(dict_0, list_0)
    str_0 = "cN~7Z\x0cn#dK-"
    var_1 = module_0.init_env()
    list_2 = module_0.get_sources()
    config_parser_0 = module_0.get_config(var_0)
    dict_1 = module_0.arglist_to_dict(list_1)
    module_0.feed_process_params_from_cli(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0)
    var_0 = module_0.init_env()
    list_1 = module_0.build_component_list(list_0, list_0)
    str_0 = "cN~7Z\x0cn#dK-"
    var_1 = module_0.init_env(str_0)
    list_2 = module_0.get_sources()
    config_parser_0 = module_0.get_config()
    module_0.arglist_to_dict(var_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0)
    list_1 = [dict_0]
    var_0 = module_0.init_env()
    module_0.build_component_list(list_1, list_1)


def test_case_11():
    base_settings_0 = module_1.BaseSettings()
    settings_0 = module_1.Settings(priority=base_settings_0)
    str_0 = ":yD,T=n!)Dotuw"
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(
            settings_0, base_settings_0, overwrite_output=str_0
        )


def test_case_12():
    list_0 = module_0.get_sources()
    settings_0 = module_1.Settings(priority=list_0)
    str_0 = "xCoj'VNa[n j"
    str_1 = "9ffalf8$n"
    config_parser_0 = module_0.get_config()
    str_2 = "/=[a"
    list_1 = [str_0, str_2, str_1, str_2]
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(
            settings_0, list_1, overwrite_output=str_2
        )


def test_case_13():
    dict_0 = {}
    settings_0 = module_1.Settings(priority=dict_0)
    dict_1 = module_0.feed_complete_default_values_from_settings(dict_0, settings_0)


def test_case_14():
    dict_0 = {}
    settings_0 = module_1.Settings(priority=dict_0)
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(settings_0, settings_0)


def test_case_15():
    base_settings_0 = module_1.BaseSettings()
    none_type_0 = None
    var_0 = base_settings_0.setdefault(none_type_0)
    list_0 = module_0.build_component_list(base_settings_0, base_settings_0)
    settings_0 = module_1.Settings(priority=base_settings_0)
    var_1 = module_0.init_env(var_0, var_0)
    list_1 = module_0.get_sources()
    config_parser_0 = module_0.get_config()
    config_parser_1 = module_0.get_config()


@pytest.mark.xfail(strict=True)
def test_case_16():
    list_0 = module_0.get_sources()
    none_type_0 = None
    list_1 = module_0.get_sources()
    settings_0 = module_1.Settings(priority=none_type_0)
    str_0 = "Pno'VNa[n j"
    module_0.build_component_list(settings_0, convert=str_0)


def test_case_17():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0, dict_0)
    var_0 = module_3.without_none_values(list_0)
    str_0 = "b*yK`7@-f|?n"
    var_1 = module_0.init_env(str_0)
    settings_0 = module_1.Settings()
    str_1 = "xCoj'VNa[n j"
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(settings_0, var_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    list_0 = module_0.get_sources()
    none_type_0 = None
    settings_0 = module_1.Settings(priority=none_type_0)
    dict_0 = module_0.feed_complete_default_values_from_settings(settings_0, settings_0)
    var_0 = module_0.init_env()
    list_1 = [var_0, var_0, var_0, var_0]
    module_0.feed_process_params_from_cli(settings_0, list_1, overwrite_output=var_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = False
    int_0 = 770
    dict_0 = {bool_0: bool_0, int_0: int_0, bool_0: int_0}
    list_0 = module_0.build_component_list(dict_0)
    bytes_0 = b""
    set_0 = {bytes_0}
    config_parser_0 = module_0.get_config()
    assert (
        f"{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(config_parser_0) == 1
    module_0.arglist_to_dict(set_0)


def test_case_20():
    dict_0 = {}
    bool_0 = False
    list_0 = module_0.get_sources(bool_0)
    var_0 = module_3.without_none_values(dict_0)
    list_1 = module_0.build_component_list(var_0, list_0)
    var_1 = var_0.copy()
    settings_0 = module_1.Settings(priority=var_0)
    dict_1 = module_0.feed_process_params_from_cli(settings_0, dict_0)
    str_0 = ":XCaXdZPSdpWeK"
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(settings_0, var_1, overwrite_output=str_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    base_settings_0 = module_1.BaseSettings()
    list_0 = module_0.build_component_list(base_settings_0, base_settings_0)
    str_0 = "%Coj'VN$[n j"
    none_type_0 = None
    module_0.feed_complete_default_values_from_settings(none_type_0, str_0)


def test_case_22():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0, dict_0)
    var_0 = module_0.get_config(dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_0) == 1
    str_0 = "b*yK`7@-f|?n"
    var_1 = module_0.init_env(str_0)
    settings_0 = module_1.Settings()
    str_1 = "xCoj'VNa[n j"
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(settings_0, var_0, str_1)


def test_case_23():
    list_0 = module_0.get_sources()
    dict_0 = {}
    list_1 = module_0.build_component_list(dict_0, dict_0)
    var_0 = module_3.without_none_values(dict_0)
    list_2 = module_0.build_component_list(var_0, list_1)
    list_3 = module_0.build_component_list(var_0)
    var_1 = module_0.init_env(set_syspath=var_0)
    settings_0 = module_1.Settings(priority=list_0)
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(settings_0, dict_0, settings_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0, dict_0)
    settings_0 = module_1.Settings(priority=dict_0)
    dict_1 = settings_0.clear()
    dict_2 = module_0.feed_complete_default_values_from_settings(dict_0, settings_0)
    var_0 = module_0.init_env()
    var_1 = module_0.init_env()
    config_parser_0 = module_0.get_config()
    str_0 = "K<l-\x0b6]j+Q>XQ|q"
    var_0.delete(str_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    dict_0 = {}
    str_0 = "*kNj?jH*_7n?m.b4E"
    str_1 = "[mg1a~,NN"
    list_0 = [str_0, str_1, str_1]
    var_0 = list_0.__add__(list_0)
    var_1 = list_0.copy()
    module_0.build_component_list(dict_0, var_1)
