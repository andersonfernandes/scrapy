# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import scrapy.utils.conf as module_0
import scrapy.settings as module_1
import scrapy.utils.python as module_2
import scrapy.exceptions as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_0) == 1
    module_0.build_component_list(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    str_1 = module_0.closest_scrapy_cfg()
    assert str_1 == ""
    base_settings_0 = module_1.BaseSettings(str_0, str_1)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    var_0 = module_0.build_component_list(base_settings_0)
    var_1 = module_0.get_config(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_1) == 1
    var_2 = module_0.build_component_list(str_1, var_0)
    var_3 = module_0.get_config()
    var_4 = module_0.init_env()
    module_0.arglist_to_dict(var_1)


def test_case_2():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    var_0 = module_0.arglist_to_dict(str_0)
    var_1 = module_0.build_component_list(var_0)


def test_case_3():
    var_0 = module_0.init_env()


def test_case_4():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    var_0 = module_0.arglist_to_dict(str_0)
    var_1 = module_0.build_component_list(var_0, str_0)


def test_case_5():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    var_0 = module_0.arglist_to_dict(str_0)
    var_1 = module_0.build_component_list(var_0)
    var_2 = module_0.get_config(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_2) == 1


def test_case_6():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    str_1 = module_0.closest_scrapy_cfg()
    assert str_1 == ""
    base_settings_0 = module_1.BaseSettings(str_0, str_1)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    var_0 = module_0.build_component_list(base_settings_0)
    var_1 = module_0.build_component_list(str_0, var_0)
    var_2 = module_0.feed_process_params_from_cli(base_settings_0, var_0)
    var_3 = var_2.update(str_1)


def test_case_7():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    str_1 = module_0.closest_scrapy_cfg()
    assert str_1 == ""
    var_0 = module_0.arglist_to_dict(str_0)
    var_1 = module_0.get_config(str_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_1) == 1
    list_0 = module_0.get_sources()
    var_2 = module_0.get_config(var_0)
    var_3 = module_0.build_component_list(var_0, list_0)
    var_4 = module_0.get_config(var_0)
    str_2 = module_0.closest_scrapy_cfg(prevpath=var_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    base_settings_0 = module_1.BaseSettings()
    var_0 = module_0.build_component_list(
        base_settings_0, base_settings_0, base_settings_0
    )
    var_0.__rsub__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    str_1 = module_0.closest_scrapy_cfg()
    assert str_1 == ""
    var_0 = module_0.arglist_to_dict(str_1)
    var_1 = var_0.setdefault(str_0)
    var_2 = module_0.build_component_list(var_0)
    var_3 = module_0.get_config(var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_3) == 1
    var_4 = module_0.init_env()
    module_0.build_component_list(var_0, var_3)


def test_case_10():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    base_settings_0 = module_1.BaseSettings(str_0, str_0)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    int_0 = -331
    var_0 = base_settings_0.set(int_0, int_0, base_settings_0)
    var_1 = module_0.build_component_list(base_settings_0)


def test_case_11():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    str_1 = module_0.closest_scrapy_cfg()
    assert str_1 == ""
    base_settings_0 = module_1.BaseSettings(str_0, str_1)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    var_0 = module_0.feed_process_params_from_cli(
        base_settings_0, base_settings_0, overwrite_output=str_1
    )
    var_1 = str_0.__iter__()


def test_case_12():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    str_1 = module_2.without_none_values(str_0)
    base_settings_0 = module_1.BaseSettings(str_0, str_1)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    with pytest.raises(module_3.UsageError):
        module_0.feed_process_params_from_cli(
            base_settings_0, base_settings_0, overwrite_output=str_1
        )


def test_case_13():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    base_settings_0 = module_1.BaseSettings(str_0, str_0)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    var_0 = module_0.get_config(base_settings_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_0) == 1
    var_1 = module_0.init_env()
    with pytest.raises(module_3.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, var_0, str_0, var_0)


def test_case_14():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    base_settings_0 = module_1.BaseSettings(str_0, str_0)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    var_0 = module_0.build_component_list(base_settings_0)
    var_1 = module_0.get_config()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_1) == 1
    with pytest.raises(module_3.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, var_0, var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    list_0 = module_0.get_sources()
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    str_1 = module_0.closest_scrapy_cfg()
    assert str_1 == ""
    base_settings_0 = module_1.BaseSettings(str_0, str_1)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    var_0 = module_0.get_config()
    var_1 = module_0.get_config(list_0)
    module_0.feed_process_params_from_cli(base_settings_0, var_0, var_0)


def test_case_16():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    base_settings_0 = module_1.BaseSettings(str_0, str_0)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    var_0 = module_0.build_component_list(base_settings_0)
    var_1 = module_0.arglist_to_dict(base_settings_0)
    bool_0 = True
    var_2 = module_0.get_config(bool_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_2) == 1
    var_3 = module_0.init_env(set_syspath=bool_0)
    with pytest.raises(module_3.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, base_settings_0, var_2)


def test_case_17():
    base_settings_0 = module_1.BaseSettings()
    var_0 = module_0.feed_complete_default_values_from_settings(
        base_settings_0, base_settings_0
    )


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_0) == 1
    base_settings_0 = module_1.BaseSettings(str_0, str_0)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    var_1 = module_0.build_component_list(base_settings_0)
    var_2 = var_0.values()
    var_3 = module_0.feed_complete_default_values_from_settings(
        base_settings_0, base_settings_0
    )
    var_4 = module_0.init_env()
    var_5 = module_0.feed_process_params_from_cli(base_settings_0, var_1)
    var_6 = module_0.build_component_list(str_0, var_1)
    module_0.feed_process_params_from_cli(
        base_settings_0, var_2, overwrite_output=var_1
    )


def test_case_19():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    var_0 = module_0.init_env(set_syspath=str_0)
    base_settings_0 = module_1.BaseSettings(str_0, str_0)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    var_1 = module_0.build_component_list(base_settings_0)
    var_2 = module_0.feed_complete_default_values_from_settings(
        base_settings_0, base_settings_0
    )
    var_3 = module_0.init_env()
    var_4 = module_0.init_env()
    str_1 = "G\r$k:X_^qDxK@z-q1"
    str_2 = "QT\tFN\t^:ug>TMrz"
    list_0 = [str_1, var_3, var_0, str_2]
    with pytest.raises(module_3.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_0) == 1
    base_settings_0 = module_1.BaseSettings(str_0, str_0)
    assert (
        f"{type(base_settings_0).__module__}.{type(base_settings_0).__qualname__}"
        == "scrapy.settings.BaseSettings"
    )
    assert len(base_settings_0) == 0
    var_1 = module_0.build_component_list(base_settings_0)
    var_2 = module_0.get_config(var_1)
    var_3 = module_0.init_env()
    var_4 = module_0.feed_complete_default_values_from_settings(
        base_settings_0, base_settings_0
    )
    var_5 = module_0.init_env()
    var_6 = module_0.feed_process_params_from_cli(base_settings_0, base_settings_0)
    str_1 = "`8'M7wT{gi+Bs\x0b\nJ$`!\n"
    str_2 = "zy.\t7~A|:/@x"
    str_3 = "U\x0bj9\x0b3aa_'g\\P8EE;0"
    list_0 = [str_2, str_3, var_3, var_5]
    module_0.build_component_list(str_1, list_0)
