# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import url as module_0
import re as module_1
import scrapy.utils.python as module_2
import urllib.parse as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "V#sT$7 gKm2M/bW\x0cH"
    str_1 = module_0.escape_ajax(str_0)
    assert str_1 == "V#sT$7 gKm2M/bW\x0cH"
    str_2 = module_0.guess_scheme(str_1)
    assert str_2 == "http://V#sT$7 gKm2M/bW\x0cH"
    str_3 = "c][f\ns4\tnAg9x'A"
    str_4 = "kY7).~"
    list_0 = []
    bool_0 = module_0.url_is_from_any_domain(str_2, list_0)
    assert bool_0 is False
    str_5 = module_0.add_http_if_no_scheme(str_4)
    assert str_5 == "http://kY7).~"
    bool_1 = False
    bool_2 = True
    str_6 = module_0.strip_url(str_3, bool_1, bool_2)
    assert str_6 == "c][fs4nAg9x'A"
    module_1.compile(list_0)


def test_case_1():
    str_0 = "8fk}dU|:i<ffNx\\]"
    str_1 = module_0.add_http_if_no_scheme(str_0)
    assert str_1 == "http://8fk}dU|:i<ffNx\\]"
    str_2 = module_0.escape_ajax(str_0)
    assert str_2 == "8fk}dU|:i<ffNx\\]"
    str_3 = module_0.guess_scheme(str_0)
    assert str_3 == "http://8fk}dU|:i<ffNx\\]"
    str_4 = module_0.escape_ajax(str_3)
    assert str_4 == "http://8fk}dU|:i<ffNx\\]"
    str_5 = "@@*x.`,Y0"
    str_6 = module_0.add_http_if_no_scheme(str_0)
    assert str_6 == "http://8fk}dU|:i<ffNx\\]"
    list_0 = []
    bool_0 = module_0.url_has_any_extension(str_5, list_0)
    assert bool_0 is False
    parse_result_0 = module_0.parse_url(str_5)
    str_7 = "\tc{(U+)j"
    bool_1 = module_0.url_is_from_any_domain(str_7, str_3)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ""
    str_1 = module_0.strip_url(str_0, str_0)
    assert str_1 == ""
    str_2 = "V#sT$7 gKm2M/bW\x0cH"
    str_3 = module_0.escape_ajax(str_2)
    assert str_3 == "V#sT$7 gKm2M/bW\x0cH"
    str_4 = module_0.guess_scheme(str_3)
    assert str_4 == "http://V#sT$7 gKm2M/bW\x0cH"
    str_5 = "c][f\ns4\tnAg9x'A"
    str_6 = module_0.guess_scheme(str_5)
    assert str_6 == "http://c][f\ns4\tnAg9x'A"
    str_7 = "kY7).~"
    list_0 = module_2.to_unicode(str_4, str_0)
    assert list_0 == "http://V#sT$7 gKm2M/bW\x0cH"
    bool_0 = module_0.url_is_from_any_domain(str_4, list_0)
    assert bool_0 is True
    str_8 = module_0.add_http_if_no_scheme(str_7)
    assert str_8 == "http://kY7).~"
    str_9 = ""
    str_10 = module_0.add_http_if_no_scheme(str_9)
    assert str_10 == "http://"
    bool_1 = True
    str_11 = module_0.strip_url(str_4, origin_only=bool_1)
    assert str_11 == "http://V/"
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    module_3.urlparse(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    str_0 = "Q^=S')"
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.url_has_any_extension(str_0, list_0)


def test_case_4():
    str_0 = "c][f\ns4\tnAg9x'A"
    str_1 = "kY7).~"
    list_0 = []
    str_2 = module_0.add_http_if_no_scheme(str_1)
    assert str_2 == "http://kY7).~"
    bool_0 = True
    bool_1 = True
    str_3 = module_0.strip_url(str_0, bool_0, bool_1)
    assert str_3 == "c][fs4nAg9x'A"
    str_4 = "b\r7\x0bG<2fV."
    bool_2 = module_0.url_has_any_extension(str_4, list_0)
    assert bool_2 is False


def test_case_5():
    str_0 = "E'y"
    parse_result_0 = module_0.parse_url(str_0)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6


def test_case_6():
    str_0 = "+O}TD:7pBe"
    str_1 = module_0.escape_ajax(str_0)
    assert str_1 == "+O}TD:7pBe"


def test_case_7():
    str_0 = "dPvX$E!Sl[+~"
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://dPvX$E!Sl[+~"


def test_case_8():
    str_0 = ":9a=\t6!,'?<\x0cQ<t>j\t\x0c/"
    str_1 = module_0.strip_url(str_0, origin_only=str_0, strip_fragment=str_0)
    assert str_1 == "/"


def test_case_9():
    none_type_0 = None
    str_0 = module_0.strip_url(none_type_0, strip_fragment=none_type_0)
    assert str_0 == b""


def test_case_10():
    var_0 = module_1.purge()
    str_0 = module_0.strip_url(var_0, var_0)
    assert str_0 == b""


def test_case_11():
    str_0 = "1]`G2u:Z)tqN>.{Q["
    str_1 = module_0.strip_url(str_0, strip_default_port=str_0)
    assert str_1 == "1]`G2u:Z)tqN>.{Q["


def test_case_12():
    none_type_0 = None
    str_0 = module_0.strip_url(none_type_0, strip_default_port=none_type_0)
    assert str_0 == b""


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = ";%jY5nC,)cY`%5cMa*"
    none_type_0 = None
    module_0.url_is_from_spider(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    float_0 = 1350.98
    list_0 = [float_0, float_0]
    module_0.url_has_any_extension(float_0, list_0)


def test_case_15():
    str_0 = "V#sT$7 gKm2M/bW\x0cH"
    str_1 = module_0.escape_ajax(str_0)
    assert str_1 == "V#sT$7 gKm2M/bW\x0cH"
    str_2 = "NA"
    str_3 = module_0.escape_ajax(str_2)
    assert str_3 == "NA"
    str_4 = module_0.strip_url(str_1)
    assert str_4 == "V"
    str_5 = "http://2$qflxw.y d.x\n@z~\r"
    str_6 = module_0.guess_scheme(str_5)
    assert str_6 == "http://2$qflxw.y d.x\n@z~\r"
    str_7 = "%-X*+J$S<Xq>,+tj&7c"
    bool_0 = module_0.url_has_any_extension(str_7, str_6)
    assert bool_0 is False
    str_8 = module_0.escape_ajax(str_5)
    assert str_8 == "http://2$qflxw.y d.x\n@z~\r"


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "/Jqj"
    parse_result_0 = module_0.parse_url(str_0)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "file:///Jqj"
    parse_result_1 = module_0.parse_url(str_0, str_0)
    assert (
        f"{type(parse_result_1).__module__}.{type(parse_result_1).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_1) == 6
    none_type_0 = None
    parse_result_2 = module_0.parse_url(str_1)
    assert (
        f"{type(parse_result_2).__module__}.{type(parse_result_2).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_2) == 6
    bool_0 = False
    bool_1 = False
    str_2 = module_0.strip_url(none_type_0, bool_0, bool_1)
    assert str_2 == b""
    str_3 = module_0.add_http_if_no_scheme(str_0)
    assert str_3 == "http:///Jqj"
    var_0 = parse_result_1.encode()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "urllib.parse.ParseResultBytes"
    )
    assert len(var_0) == 6
    str_4 = "\x0c8"
    str_5 = module_0.strip_url(str_4, bool_0, bool_1)
    var_0.__new__(parse_result_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "/Jqj"
    parse_result_0 = module_0.parse_url(str_0)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "file:///Jqj"
    parse_result_1 = module_0.parse_url(str_0, str_0)
    assert (
        f"{type(parse_result_1).__module__}.{type(parse_result_1).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_1) == 6
    none_type_0 = None
    parse_result_2 = module_0.parse_url(str_1)
    assert (
        f"{type(parse_result_2).__module__}.{type(parse_result_2).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_2) == 6
    bool_0 = False
    bool_1 = False
    str_2 = module_0.strip_url(none_type_0, bool_0, bool_1)
    assert str_2 == b""
    str_3 = module_0.add_http_if_no_scheme(str_0)
    assert str_3 == "http:///Jqj"
    var_0 = module_0.parse_url(parse_result_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(var_0) == 6
    str_4 = "\x0c8"
    str_5 = module_0.strip_url(str_4, bool_0, bool_1)
    var_0.__new__(parse_result_0, **var_0)


def test_case_18():
    str_0 = "2$qflxw.y d.x@z~"
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://2$qflxw.y d.x@z~"
    str_2 = "@2f\\t"
    str_3 = module_0.add_http_if_no_scheme(str_2)
    assert str_3 == "http://@2f\\t"
    bool_0 = module_0.url_is_from_any_domain(str_2, str_2)
    assert bool_0 is False
    str_4 = module_0.strip_url(str_2)
    assert str_4 == "@2f\\t"
    none_type_0 = None
    str_5 = module_0.strip_url(bool_0, none_type_0)
    assert str_5 == b""
    str_6 = module_0.escape_ajax(str_3)
    assert str_6 == "http://@2f\\t"
    bool_1 = True
    str_7 = module_0.strip_url(
        str_6, none_type_0, origin_only=bool_1, strip_fragment=str_5
    )
    assert str_7 == "http://@2f\\t/"
    var_0 = module_2.to_unicode(str_4, bool_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = ""
    str_1 = module_0.strip_url(str_0, str_0)
    assert str_1 == ""
    str_2 = "V#sT$7 gKm2M/bW\x0cH"
    str_3 = module_0.escape_ajax(str_2)
    assert str_3 == "V#sT$7 gKm2M/bW\x0cH"
    str_4 = module_0.guess_scheme(str_2)
    assert str_4 == "http://V#sT$7 gKm2M/bW\x0cH"
    str_5 = module_0.guess_scheme(str_2)
    assert str_5 == "http://V#sT$7 gKm2M/bW\x0cH"
    str_6 = module_0.escape_ajax(str_1)
    assert str_6 == ""
    str_7 = module_0.add_http_if_no_scheme(str_3)
    assert str_7 == "http://V#sT$7 gKm2M/bW\x0cH"
    bool_0 = True
    str_8 = "http://2$qflxw.y d.x\n@z~\r"
    str_9 = module_0.strip_url(str_8)
    assert str_9 == "http://z~"
    str_10 = "rD^\r{"
    bool_1 = module_0.url_has_any_extension(str_10, str_10)
    assert bool_1 is True
    str_11 = "2lBZa5\rB"
    str_12 = module_0.escape_ajax(str_11)
    assert str_12 == "2lBZa5\rB"
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = ""
    str_1 = module_1.sub(str_0, str_0, str_0)
    str_2 = "V#!T$7 g7m2M/bW\x0cH"
    str_3 = module_0.escape_ajax(str_2)
    assert str_3 == "V?_escaped_fragment_=T%247+g7m2M%2FbW%0CH"
    str_4 = module_0.guess_scheme(str_3)
    assert str_4 == "http://V?_escaped_fragment_=T%247+g7m2M%2FbW%0CH"
    str_5 = "c][f\ns4\tnAg9x'A"
    module_1.sub(str_3, str_5, str_0, str_4)


def test_case_21():
    str_0 = ""
    str_1 = module_0.strip_url(str_0, str_0)
    assert str_1 == ""
    str_2 = ':V-I0D6M@tD+"R;'
    str_3 = "#9-q}SKQI(\nRP[=wV"
    str_4 = module_0.escape_ajax(str_3)
    assert str_4 == "#9-q}SKQI(\nRP[=wV"
    str_5 = module_0.escape_ajax(str_2)
    assert str_5 == ':V-I0D6M@tD+"R;'
    str_6 = module_0.guess_scheme(str_5)
    assert str_6 == 'http://:V-I0D6M@tD+"R;'
    str_7 = "c][f\ns4\tnAg9x'A"
    str_8 = module_0.guess_scheme(str_7)
    assert str_8 == "http://c][f\ns4\tnAg9x'A"
    str_9 = "kY7).~"
    list_0 = []
    bool_0 = module_2.to_unicode(str_2)
    str_10 = module_0.add_http_if_no_scheme(str_9)
    assert str_10 == "http://kY7).~"
    bool_1 = True
    str_11 = module_0.strip_url(str_6, origin_only=bool_1)
    assert str_11 == 'http://tD+"R;/'
    str_12 = "p"
    bool_2 = module_0.url_has_any_extension(str_12, list_0)
    assert bool_2 is False
    str_13 = module_0.escape_ajax(str_2)
    assert str_13 == ':V-I0D6M@tD+"R;'
    var_0 = module_1.compile(str_5)
