# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import url as module_0
import re as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = -1980.152661 + 1301.55696j
    module_0.url_is_from_any_domain(complex_0, complex_0)


def test_case_1():
    str_0 = ")[j/tG\n7v,~w4A_,B"
    var_0 = module_0.escape_ajax(str_0)
    assert var_0 == ")[j/tG\n7v,~w4A_,B"


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, none_type_0)
    assert var_0 == b""
    str_0 = '8JJa=0b}"bv1xD'
    var_1 = module_0.url_is_from_any_domain(var_0, none_type_0)
    assert var_1 is False
    var_2 = module_0.strip_url(str_0, strip_fragment=str_0)
    var_3 = module_0.escape_ajax(var_2)
    assert var_3 == '8JJa=0b}"bv1xD'
    var_4 = module_0.guess_scheme(str_0)
    assert var_4 == 'http://8JJa=0b}"bv1xD'
    var_5 = module_0.add_http_if_no_scheme(var_4)
    assert var_5 == 'http://8JJa=0b}"bv1xD'
    module_0.url_is_from_spider(var_5, var_2)


def test_case_3():
    str_0 = '8JJa=0b}"bv1xD'
    var_0 = module_0.guess_scheme(str_0)
    assert var_0 == 'http://8JJa=0b}"bv1xD'


def test_case_4():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, none_type_0, origin_only=none_type_0)
    assert var_0 == b""


def test_case_5():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, origin_only=none_type_0)
    assert var_0 == b""


def test_case_6():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, strip_default_port=none_type_0)
    assert var_0 == b""


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ")[j/tG\n7v,~w4A_,B"
    var_0 = module_0.strip_url(str_0, strip_fragment=str_0)
    assert var_0 == ")[j/tG7v,~w4A_,B"
    var_1 = module_0.escape_ajax(var_0)
    assert var_1 == ")[j/tG7v,~w4A_,B"
    var_2 = module_0.guess_scheme(var_0)
    assert var_2 == "http://)[j/tG7v,~w4A_,B"
    module_0.url_is_from_spider(var_2, var_2)


def test_case_8():
    var_0 = module_1.purge()
    var_1 = module_0.strip_url(var_0, var_0, origin_only=var_0)
    assert var_1 == b""
    var_2 = module_0.url_has_any_extension(var_1, var_1)
    assert var_2 is False


def test_case_9():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, strip_fragment=none_type_0)
    assert var_0 == b""


def test_case_10():
    str_0 = ")[j/tG\n7v,~w4A_,B"
    var_0 = module_0.url_is_from_any_domain(str_0, str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, none_type_0)
    assert var_0 == b""
    str_0 = '8JJa=0b}"bv1xD'
    var_1 = module_0.url_is_from_any_domain(var_0, none_type_0)
    assert var_1 is False
    var_2 = module_0.strip_url(str_0, strip_fragment=str_0)
    var_3 = module_0.escape_ajax(var_2)
    assert var_3 == '8JJa=0b}"bv1xD'
    var_4 = module_0.url_has_any_extension(str_0, var_2)
    var_5 = module_0.guess_scheme(str_0)
    assert var_5 == 'http://8JJa=0b}"bv1xD'
    var_6 = module_0.url_is_from_any_domain(var_5, var_3)
    assert var_6 is False
    none_type_1 = None
    var_7 = module_0.url_is_from_any_domain(var_2, none_type_1)
    module_0.url_is_from_spider(none_type_0, var_1)


def test_case_12():
    str_0 = "__class__"
    var_0 = module_0.strip_url(str_0, origin_only=str_0, strip_fragment=str_0)
    assert var_0 == "/"


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, none_type_0)
    assert var_0 == b""
    str_0 = ")[j/tG\n7v,~w4A_,B"
    var_1 = module_0.url_is_from_any_domain(var_0, none_type_0)
    assert var_1 is False
    module_0.strip_url(var_0, var_0, origin_only=str_0, strip_fragment=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, none_type_0)
    assert var_0 == b""
    str_0 = ")[j/tG\n7v,~w4A_,B"
    var_1 = module_0.parse_url(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(var_1) == 6
    var_2 = module_0.escape_ajax(str_0)
    assert var_2 == ")[j/tG\n7v,~w4A_,B"
    var_3 = module_0.url_is_from_any_domain(var_1, none_type_0)
    assert var_3 is False
    none_type_1 = None
    none_type_1.__setitem__(none_type_1, none_type_1)


def test_case_15():
    str_0 = '8JJa=0b}"bv1xD'
    var_0 = module_0.strip_url(str_0, strip_fragment=str_0)
    assert var_0 == '8JJa=0b}"bv1xD'
    var_1 = module_0.guess_scheme(str_0)
    assert var_1 == 'http://8JJa=0b}"bv1xD'
    var_2 = module_0.url_is_from_any_domain(var_1, var_1)
    assert var_2 is False
    none_type_0 = None
    var_3 = module_0.strip_url(var_1, none_type_0, none_type_0)
    assert var_3 == 'http://8JJa=0b}"bv1xD'


def test_case_16():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, none_type_0)
    assert var_0 == b""
    str_0 = "8#|o\x0c_J1&a"
    var_1 = module_0.url_is_from_any_domain(var_0, none_type_0)
    assert var_1 is False
    var_2 = module_0.strip_url(str_0, strip_fragment=str_0)
    var_3 = module_0.escape_ajax(var_2)
    assert var_3 == "8"
    var_4 = module_0.guess_scheme(str_0)
    assert var_4 == "http://8#|o\x0c_J1&a"
    var_5 = module_0.url_is_from_any_domain(var_4, var_3)
    assert var_5 is True


@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, none_type_0)
    assert var_0 == b""
    str_0 = "/54En;"
    var_1 = module_0.url_is_from_any_domain(var_0, none_type_0)
    assert var_1 is False
    var_2 = module_0.strip_url(str_0, strip_fragment=str_0)
    var_3 = module_0.escape_ajax(var_2)
    assert var_3 == "/54En"
    var_4 = module_0.guess_scheme(str_0)
    assert var_4 == "file:///54En%3B"
    var_2.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "1;CX#!hPuS=4Hdn6=%7m"
    var_0 = module_0.escape_ajax(str_0)
    assert var_0 == "1;CX?_escaped_fragment_=hPuS%3D4Hdn6%3D%257m"
    var_1 = module_0.url_has_any_extension(str_0, str_0)
    assert var_1 is True
    var_2 = module_0.strip_url(str_0, str_0)
    assert var_2 == "1;CX"
    module_0.url_has_any_extension(var_2, var_1)


def test_case_19():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, none_type_0)
    assert var_0 == b""
    str_0 = '\x0b@oY0"TNxIK\nIT\t\x0cIf~\t'
    var_1 = module_0.strip_url(str_0, strip_fragment=str_0)
    var_2 = module_0.escape_ajax(var_1)
    assert var_2 == '\x0b@oY0"TNxIKIT\x0cIf~'
    var_3 = module_0.guess_scheme(str_0)
    assert var_3 == 'http://\x0b@oY0"TNxIK\nIT\t\x0cIf~\t'
    var_4 = module_0.strip_url(var_3, strip_default_port=var_3)
    assert var_4 == 'http://oY0"TNxIKIT\x0cIf~'
