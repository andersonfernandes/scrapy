# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import request as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    request_fingerprinter_0.fingerprint(request_fingerprinter_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    module_0.fingerprint(request_fingerprinter_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.fingerprint(none_type_0)


def test_case_3():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "l2h)m(#D\t+\t$;i"
    module_0.RequestFingerprinter(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    complex_0 = -3615.5298 + 1210.98j
    str_0 = "p[O`x[[\x0c"
    module_0.request_authenticate(complex_0, complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    module_0.request_from_dict(dict_0, spider=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    dict_0 = {
        request_fingerprinter_0: request_fingerprinter_0,
        request_fingerprinter_0: request_fingerprinter_0,
    }
    module_0.request_from_dict(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    module_0.request_fingerprint(
        request_fingerprinter_0, keep_fragments=request_fingerprinter_0
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '^eqmM|i5mnqIyB"ZYK'
    module_0.request_fingerprint(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    module_0.fingerprint(
        request_fingerprinter_0, include_headers=request_fingerprinter_0
    )


@pytest.mark.xfail(strict=True)
def test_case_11():
    request_fingerprinter_0 = module_0.RequestFingerprinter()
    assert (
        f"{type(request_fingerprinter_0).__module__}.{type(request_fingerprinter_0).__qualname__}"
        == "request.RequestFingerprinter"
    )
    assert (
        f"{type(module_0.RequestFingerprinter.from_crawler).__module__}.{type(module_0.RequestFingerprinter.from_crawler).__qualname__}"
        == "builtins.method"
    )
    str_0 = "G$8?5^X~C)6"
    module_0.fingerprint(request_fingerprinter_0, include_headers=str_0)
