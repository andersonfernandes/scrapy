# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import iterators as module_0
import re as module_1


def test_case_0():
    bool_0 = False
    stream_reader_0 = module_0._StreamReader(bool_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "iterators._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    none_type_0 = None
    stream_reader_0 = module_0._StreamReader(none_type_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "iterators._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    stream_reader_1 = module_0._StreamReader(bool_0)
    assert stream_reader_1.encoding == "utf-8"
    stream_reader_1.read()


def test_case_2():
    complex_0 = -1576 - 4352j
    var_0 = module_0.xmliter_lxml(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "Hi`z:mO{\n~fti6:a"
    str_1 = "#39arE-IdD*R"
    stream_reader_0 = module_0._StreamReader(str_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "iterators._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    stream_reader_1 = module_0._StreamReader(str_0)
    assert stream_reader_1.encoding == "utf-8"
    none_type_0 = None
    var_0 = module_0.xmliter_lxml(str_0, none_type_0, str_1)
    var_1 = stream_reader_1.read()
    assert var_1 == b"Hi`z:mO{\n~fti6:a"
    module_1.split(var_1, var_1, flags=var_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.purge()
    var_1 = module_0.xmliter(var_0, var_0)
    var_2 = module_0.xmliter_lxml(var_1, var_0, prefix=var_0)
    var_2.__new__(var_0, *var_2)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    var_0 = module_0.csviter(none_type_0)
    var_0.__new__(none_type_0, *var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.xmliter(none_type_0, none_type_0)
    none_type_1 = None
    var_1 = module_0.csviter(none_type_1, encoding=var_0, quotechar=none_type_1)
    stream_reader_0 = module_0._StreamReader(var_1)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "iterators._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    var_1.__new__(none_type_0, *var_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    var_0 = module_1.purge()
    stream_reader_0 = module_0._StreamReader(var_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "iterators._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    var_1 = module_0.xmliter(none_type_0, none_type_0)
    none_type_1 = None
    var_2 = module_0.xmliter_lxml(none_type_1, none_type_1, stream_reader_0, var_0)
    none_type_0.__new__(none_type_0, *var_2)
